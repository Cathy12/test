{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","subject_array","verb_array","Math","floor","random","array_name","length","array_verb","array_obj","useState","name","setName","verb","setVerb","obj","setObj","sentences","setSentences","sub","setSub","ver","setVer","itemText","setItemText","verbText","setVerbText","removeWords","setRemoveWords","console","log","className","style","margin","backgroundColor","join","type","value","onChange","e","target","onClick","map","sentence","i","key","newSub","filter","x","newVer","aVerb","aSub","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2IAAAA,EAAOC,QAAU,IAA0B,kC,4HC2J5BC,MArJf,WAGE,IAAMC,EAAgB,CAAC,UAAW,QAAS,SAAU,SAAU,WAAY,YAAa,QAAS,WAAY,UACvGC,EAAa,CAAC,SAAU,SAAU,QAAS,SAAU,QAAS,QACpEC,KAAKC,MAAqB,EAAdD,KAAKE,SAAY,GAE7B,IAAMC,EAAcL,EAAcE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAcM,SACrEC,EAAcN,EAAWC,KAAKC,MAAMD,KAAKE,SAAWH,EAAWK,SAC/DE,EAAaR,EAAcE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAcM,SAT7D,EAcWG,mBAASJ,GAdpB,mBAcNK,EAdM,KAcAC,EAdA,OAeWF,mBAASF,GAfpB,mBAeNK,EAfM,KAeAC,EAfA,OAgBSJ,mBAASD,GAhBlB,mBAgBNM,EAhBM,KAgBDC,EAhBC,OAkBqBN,mBAAS,CAAC,GAAD,OAAIC,EAAJ,YAAYE,EAAZ,YAAoBE,KAlBlD,mBAkBNE,EAlBM,KAkBKC,EAlBL,OAsBSR,mBAAST,GAtBlB,mBAsBNkB,EAtBM,KAsBDC,EAtBC,OAuBSV,mBAASR,GAvBlB,mBAuBNmB,EAvBM,KAuBDC,EAvBC,OA0BmBZ,mBAAS,IA1B5B,mBA0BNa,EA1BM,KA0BIC,EA1BJ,OA2BmBd,mBAAS,IA3B5B,mBA2BNe,EA3BM,KA2BIC,EA3BJ,OA4ByBhB,oBAAS,GA5BlC,mBA4BNiB,EA5BM,KA4BOC,EA5BP,KAsFb,OAvDFC,QAAQC,IAAIP,GAqDVM,QAAQC,IAAIT,GACZQ,QAAQC,IAAIH,GAEV,yBAAKI,UAAU,MAAMC,MAAO,CAACC,OAAQ,OAAQC,gBAAiB,YAC5D,6CArEmB,wBAqEnB,KAIA,6CAAmBf,EAAIgB,KAAK,MAA5B,KACA,oDAA0Bd,EAAIc,KAAK,MAAnC,KACA,yBAAKH,MAAO,CAACC,OAAQ,QACnB,2BAAOG,KAAK,OAAOC,MAAOd,EAAUe,SAAU,SAACC,GAAQf,EAAYe,EAAEC,OAAOH,UAC5E,4BAAQI,QAtBW,WACvBrB,EAAO,GAAD,mBAAKD,GAAL,CAAUI,KAChBC,EAAY,MAoBR,gBAEF,yBAAKQ,MAAO,CAACC,OAAQ,QACnB,2BAAOG,KAAK,OAAOC,MAAOZ,EAAUa,SAAU,SAACC,GAAQb,EAAYa,EAAEC,OAAOH,UAC5E,4BAAQI,QArBW,WACvBnB,EAAO,GAAD,mBAAKD,GAAL,CAAUI,KAChBC,EAAY,MAmBR,eAQF,6BACE,2BAAOU,KAAK,WAAWC,MAAOV,EAAaW,SAAU,SAACC,GAAQX,GAAgBD,MAC9E,yEAGF,yDACA,4BACCV,EAAUyB,KAAI,SAACC,EAAUC,GAAX,OACb,uBAAGC,IAAKD,GAAR,IAAaD,EAAb,SAGF,6BAAqB,IAAfxB,EAAIZ,QAA+B,IAAfc,EAAId,OAAe,uDAAmC,MAClF,6BACE,4BAAQkC,QAxFQ,WAElB,IAAMK,EAAS3B,EAAI4B,QAAO,SAAAC,GAAC,OAAIA,GAAKjC,KAC9BkC,EAAS5B,EAAI0B,QAAO,SAAAC,GAAC,OAAIA,GAAKnC,KAEpC,IAAsB,IAAlBiC,EAAOvC,QAAiC,IAAlB0C,EAAO1C,SAC3BoB,EAGF,OAFAP,EAAO0B,QACPxB,EAAO2B,GAOX,GAAmB,IAAf9B,EAAIZ,QAA+B,IAAfc,EAAId,OAA5B,CAGA,IAAM2C,EAASvB,EAAcsB,EAAO9C,KAAKC,MAAMD,KAAKE,SAAW4C,EAAO1C,SAAWc,EAAIlB,KAAKC,MAAMD,KAAKE,SAAWgB,EAAId,SAC9G4C,EAAQxB,EAAcmB,EAAO3C,KAAKC,MAAMD,KAAKE,SAAWyC,EAAOvC,SAAWY,EAAIhB,KAAKC,MAAMD,KAAKE,SAAWc,EAAIZ,SAK7GoC,EAAQ,UAAM5B,EAAN,YAAamC,EAAb,YAAsBC,GAEpCjC,EAAa,GAAD,mBAAKD,GAAL,CAAgB0B,KACxBhB,IACFP,EAAO0B,GACPxB,EAAO2B,IAITrC,EAAQG,GAERD,EAAQoC,GAERlC,EAAOmC,MAmDL,eCnHcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.9e2d0e02.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { useState } from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nfunction App() {\n\n\n  const subject_array = [\"Kaitlyn\", \"Cathy\", \"Joanne\", \"coffee\", \"boba tea\", \"chocolate\", \"pizza\", \"dumpling\", \"noodle\"]\n  const verb_array = [\"enjoys\", \"tastes\", \"plays\", \"smells\", \"wants\", \"owns\"]\n  Math.floor((Math.random()*2)+1);\n\n  const array_name  = subject_array[Math.floor(Math.random() * subject_array.length)];\n  const array_verb  = verb_array[Math.floor(Math.random() * verb_array.length)];\n  const array_obj  = subject_array[Math.floor(Math.random() * subject_array.length)];\n\n  //console.log(\"here\")\n  //[pair] value, setValue \n  //change value, update component \n  const [name, setName] = useState(array_name) \n  const [verb, setVerb] = useState(array_verb)\n  const [obj, setObj] = useState(array_obj)\n  // initial value \n  const [sentences, setSentences] = useState([`${name} ${verb} ${obj}`])\n  var targetOfGreeting = \"welcome to my website\";\n\n  // initial value \n  const [sub, setSub] = useState(subject_array)\n  const [ver, setVer] = useState(verb_array)\n  // const [sub, setSub] = useState([])\n  // const [ver, setVer] = useState([])\n  const [itemText, setItemText] = useState(\"\")\n  const [verbText, setVerbText] = useState(\"\")\n  const [removeWords, setRemoveWords] = useState(false)\n\n  \nconsole.log(itemText)\n\n  const handleClick = () => {\n    /* Array.prototype.filter() to create a new array */\n    const newSub = sub.filter(x => x != obj)\n    const newVer = ver.filter(x => x != verb)\n\n    if (newSub.length === 0|| newVer.length === 0){\n      if (removeWords) {\n        setSub(newSub) \n        setVer(newVer)\n        return\n      }    \n    }\n\n    //def variable(on top)\n    // For situation where remove words to empty, then not remove words\n    if (sub.length === 0 || ver.length === 0){\n      return\n    }\n    const aVerb  = removeWords ? newVer[Math.floor(Math.random() * newVer.length)] : ver[Math.floor(Math.random() * ver.length)]\n    const aSub  = removeWords ? newSub[Math.floor(Math.random() * newSub.length)] : sub[Math.floor(Math.random() * sub.length)]\n    \n    // const aVerb  = newVer[Math.floor(Math.random() * newVer.length)]\n    // const aSub  = newSub[Math.floor(Math.random() * newSub.length)]\n\n    const sentence = `${obj} ${aVerb} ${aSub}`\n  \n    setSentences([...sentences, sentence])\n    if (removeWords) {\n      setSub(newSub)\n      setVer(newVer)\n    }\n    \n    // Set name to previous obj\n    setName(obj)\n    // Set verb to a random verb in verb_array\n    setVerb(aVerb)\n    // Set obj to a random obj in subject_array\n    setObj(aSub)\n\n  }\n\n  const handleItemSubmit = () => {\n    setSub([...sub, itemText])\n    setItemText(\"\")\n  }\n\n  const handleVerbSubmit = () => {\n    setVer([...ver, verbText])\n    setVerbText(\"\")\n  }\n\n  console.log(ver)\n  console.log(removeWords)\n  return (\n    <div className=\"App\" style={{margin: '50px', backgroundColor: '#cfe8fc'}}>\n      <div>\n       Hello there, { targetOfGreeting }!\n      </div>\n\n      <p>List of Items: {sub.join(\", \")} </p >\n      <p>Verbs to choose from: {ver.join(\", \")} </p >\n      <div style={{margin: \"5px\"}}>\n        <input type=\"text\" value={itemText} onChange={(e) => { setItemText(e.target.value)}} />\n        <button onClick={handleItemSubmit} >Add an item</button>     \n      </div>\n      <div style={{margin: \"5px\"}}>\n        <input type=\"text\" value={verbText} onChange={(e) => { setVerbText(e.target.value)}} />\n        <button onClick={handleVerbSubmit} >Add a verb</button> \n      </div>\n\n      {/* <div>\n        <input type=\"checkbox\" value={removeWords} onChange={(e) => { setRemoveWords(!removeWords)}} />\n        <span>Remove verbs and objects that are used</span>\n      </div> */}\n\n      <div>\n        <input type=\"checkbox\" value={removeWords} onChange={(e) => { setRemoveWords(!removeWords)}} />\n        <span>Remove verbs and objects that are used</span>\n      </div>\n\n      <p>Click to see the solitaire</p >\n      <ol>\n      {sentences.map((sentence, i) => (\n        <p key={i}> {sentence} </p >\n      ))}\n      </ol>\n      <div>{sub.length === 0 || ver.length === 0 ? <p>Out of items or verbs...</p > : null}</div>\n    <div>\n      <button onClick={handleClick}>\n        Click me\n      </button>\n    \n      \n    </div>\n      \n{/*         \n        <p>{}</p > */}\n      {/* COMMAND KC COMMAD KU */}\n      {/* <header className=\"App-header\">\n        < img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p >\n        <a\n          className=\"App-link\"\n          href=\" \"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a >\n      </header> */}\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}