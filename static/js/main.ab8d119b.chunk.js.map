{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","subject_array","verb_array","Math","floor","random","array_name","length","array_verb","array_obj","useState","name","setName","verb","setVerb","obj","setObj","sentences","setSentences","className","style","padding","backgroundColor","map","sentence","i","key","onClick","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2IAAAA,EAAOC,QAAU,IAA0B,kC,4HC0F5BC,MArFf,WAEE,IAEIC,EAAgB,CAAC,UAAW,QAAS,SAAU,SAAU,WAAY,YAAa,QAAS,WAAY,UACvGC,EAAa,CAAC,SAAU,SAAU,UAGtCC,KAAKC,MAAqB,EAAdD,KAAKE,SAAY,GAG7B,IAAMC,EAAcL,EAAcE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAcM,SACrEC,EAAcN,EAAWC,KAAKC,MAAMD,KAAKE,SAAWH,EAAWK,SAC/DE,EAAaR,EAAcE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAcM,SAb7D,EAoBWG,mBAASJ,GApBpB,mBAoBNK,EApBM,KAoBAC,EApBA,OAqBWF,mBAASF,GArBpB,mBAqBNK,EArBM,KAqBAC,EArBA,OAsBSJ,mBAASD,GAtBlB,mBAsBNM,EAtBM,KAsBDC,EAtBC,OAwBqBN,mBAAS,IAxB9B,mBAwBNO,EAxBM,KAwBKC,EAxBL,KAoDb,OACE,yBAAKC,UAAU,MAAMC,MAAO,CAACC,QAAS,UACpC,6CA7BmB,wBA6BnB,KAeF,yBAAKD,MAAO,CAACE,gBAAiB,YAC5B,yDACA,4BACCL,EAAUM,KAAI,SAACC,EAAUC,GAAX,OACb,uBAAGC,IAAKD,GAAR,IAAaD,EAAb,SAGF,4BAAQG,QAjDQ,WAClBC,QAAQC,IAAIZ,GACZW,QAAQC,IAAIlB,GAIZ,IAAMH,EAAcN,EAAWC,KAAKC,MAAMD,KAAKE,SAAWH,EAAWK,SAC/DE,EAAaR,EAAcE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAcM,SAE1EK,EAAQG,GACRa,QAAQC,IAAId,GACZa,QAAQC,IAAIlB,GAEZG,EAAQN,GACRoB,QAAQC,IAAIrB,GACZoB,QAAQC,IAAIhB,GAEZG,EAAOP,GACPmB,QAAQC,IAAIpB,GACZmB,QAAQC,IAAId,GACZ,IAAMS,EAAQ,UAAMb,EAAN,YAAcE,EAAd,YAAsBE,GACpCa,QAAQC,IAAIL,GACZN,EAAa,GAAD,mBAAKD,GAAL,CAAgBO,KAC5BI,QAAQC,IAAIZ,KA0BV,eCrEca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.ab8d119b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { useState } from 'react';\n\nfunction App() {\n\n  const subject = [\"Kaitlyn\", \"Joanne\", \"Cathy\"];\n\n  var subject_array = [\"Kaitlyn\", \"Cathy\", \"Joanne\", \"coffee\", \"boba tea\", \"chocolate\", \"pizza\", \"dumpling\", \"noodle\"]\n  var verb_array = [\"enjoys\", \"tastes\", \"drinks\"]\n \n  const array = subject[0]\n  Math.floor((Math.random()*2)+1);\n\n\n  const array_name  = subject_array[Math.floor(Math.random() * subject_array.length)];\n  const array_verb  = verb_array[Math.floor(Math.random() * verb_array.length)];\n  const array_obj  = subject_array[Math.floor(Math.random() * subject_array.length)];\n\n\n\n  //console.log(\"here\")\n  //[pair] value, setValue \n  //change value, update component \n  const [name, setName] = useState(array_name);\n  const [verb, setVerb] = useState(array_verb);\n  const [obj, setObj] = useState(array_obj);\n  // initial value \n  const [sentences, setSentences] = useState([]);\n  var targetOfGreeting = \"welcome to my website\";\n\n  const handleClick = () => {\n    console.log(sentences)\n    console.log(name)\n   \n    \n    //def variable(on top)\n    const array_verb  = verb_array[Math.floor(Math.random() * verb_array.length)];\n    const array_obj  = subject_array[Math.floor(Math.random() * subject_array.length)];\n    // Set name to previous obj\n    setName(obj)\n    console.log(obj)\n    console.log(name)\n    // Set verb to a random verb in verb_array\n    setVerb(array_verb)\n    console.log(array_verb)\n    console.log(verb)\n    // Set obj to a random obj in subject_array\n    setObj(array_obj)\n    console.log(array_obj)\n    console.log(obj)\n    const sentence = `${name} ${verb} ${obj}`\n    console.log(sentence)\n    setSentences([...sentences, sentence])\n    console.log(sentences)\n  }\n  return (\n    <div className=\"App\" style={{padding: '300px'}}>\n      <div>\n       Hello there, { targetOfGreeting }!\n      </div>\n      {/* <ul>\n        <li>Kaitlyn</li>\n        <li>Cathy</li>\n        <li>Joanne</li>\n      </ul>\n      <ol>\n      {subject_array.map((person, i) => (\n        <li key={i}>{person} </li>\n      ))}\n      </ol>\n       */}\n\n    <div style={{backgroundColor: '#7550ED'}}>\n      <p>Click to see the solitaire</p >\n      <ol>\n      {sentences.map((sentence, i) => (\n        <p key={i}> {sentence} </p >\n      ))}\n      </ol>\n      <button onClick={handleClick}>\n        Click me\n      </button>\n    </div>\n    </div> \n  );\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}